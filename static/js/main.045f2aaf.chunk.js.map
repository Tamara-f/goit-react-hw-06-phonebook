{"version":3,"sources":["components/Section.js","components/ContactListItem.js","redux/phohebookActions.js","components/ContactList.js","components/ContactEditor.js","components/Filter.js","components/App.js","redux/phoneReducer.js","redux/store.js","index.js"],"names":["Section","title","children","defaultProps","ContactListItem","name","number","onRemove","type","className","onClick","addContact","createAction","payload","contact","id","uuidv4","removeContact","changeFilter","mapDispatchToProps","onRemoveContact","connect","contacts","items","filter","toLowerCase","includes","length","map","key","INIT","ContactEditor","state","handleChange","target","value","setState","handleSubmit","e","preventDefault","props","onAddContact","this","onSubmit","htmlFor","onChange","Component","onChangeFilter","App","createReducer","action","combineReducers","store","configureStore","reducer","phoneReducer","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.045f2aaf.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.defaultProps = {\r\n  title: '',\r\n};\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node.isRequired,\r\n};\r\nexport default Section;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactListItem = ({ name, number, onRemove }) => (\r\n  <li>\r\n    <span>\r\n      {name}: {number}\r\n    </span>\r\n    <button type=\"button\" className=\"deleteBtn\" onClick={onRemove}>\r\n      Delete\r\n    </button>\r\n  </li>\r\n);\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactListItem;\r\n","import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const addContact = createAction('phonebook/add', ({ name, number }) => ({\r\n  payload: {\r\n    contact: {\r\n      id: uuidv4(),\r\n      name: name,\r\n      number: number,\r\n    },\r\n  },\r\n}));\r\n\r\nexport const removeContact = createAction('phonebook/remove');\r\n\r\nexport const changeFilter = createAction('phonebook/filter');\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ContactListItem from './ContactListItem';\r\nimport { removeContact } from '../redux/phohebookActions';\r\n\r\nconst ContactList = ({ contacts, onRemoveContact }) => {\r\n  if (contacts.length > 0) {\r\n    return (\r\n      <ul>\r\n        {contacts.map(({ id, name, number }) => (\r\n          <ContactListItem\r\n            key={id}\r\n            name={name}\r\n            number={number}\r\n            onRemove={() => onRemoveContact(id)}\r\n          />\r\n        ))}\r\n      </ul>\r\n    );\r\n  } else return null;\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n  onRemoveContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = ({ contacts }) => {\r\n  const { items, filter } = contacts;\r\n  const visibleContacts = items.filter(contact =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n  return {\r\n    contacts: visibleContacts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onRemoveContact: removeContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { addContact } from '../redux/phohebookActions';\r\n\r\nconst INIT = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nclass ContactEditor extends Component {\r\n  state = INIT;\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onAddContact(this.state);\r\n    this.setState(INIT);\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <>\r\n        <h2>Phonebook</h2>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor=\"name\">\r\n            Name\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n              name=\"name\"\r\n            />\r\n          </label>\r\n          <label htmlFor=\"number\">\r\n            Number\r\n            <br />\r\n            <input\r\n              type=\"text\"\r\n              value={number}\r\n              onChange={this.handleChange}\r\n              name=\"number\"\r\n            />\r\n          </label>\r\n          <button type=\"submit\">Add contact</button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContact: addContact,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactEditor);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { changeFilter } from '../redux/phohebookActions';\r\n\r\nconst Filter = ({ contacts, value, onChangeFilter }) => {\r\n  if (contacts.length > 0) {\r\n    return (\r\n      <div>\r\n        <span>Find name</span>\r\n        <input\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={e => onChangeFilter(e.target.value)}\r\n        />\r\n      </div>\r\n    );\r\n  } else return null;\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  contacts: PropTypes.array.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts.items,\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: changeFilter,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\n\r\nimport Section from './Section';\r\nimport ContactList from './ContactList';\r\nimport ContactEditor from './ContactEditor';\r\nimport Filter from './Filter';\r\n\r\nexport default function App() {\r\n  return (\r\n    <Section>\r\n      <ContactEditor />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </Section>\r\n  );\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nimport { addContact, removeContact, changeFilter } from './phohebookActions';\r\n\r\nconst onAddContact = (state, action) => [...state, action.payload.contact];\r\n\r\nconst onRemoveContact = (state, action) =>\r\n  state.filter(contact => contact.id !== action.payload);\r\n\r\nconst items = createReducer([], {\r\n  [addContact]: onAddContact,\r\n  [removeContact]: onRemoveContact,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (state, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport phoneReducer from './phoneReducer';\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: phoneReducer },\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/App';\nimport store from './redux/store';\n\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}